/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface Config {
  url: string
  bearerToken?: string
  httpReqTimeoutMillis?: number
}
export interface LogSelection {
  address: Array<string>
  topics: Array<Array<string>>
}
export interface TransactionSelection {
  from: Array<string>
  to: Array<string>
  sighash: Array<string>
  status?: number
}
export interface FieldSelection {
  block: Array<string>
  transaction: Array<string>
  log: Array<string>
}
export interface Query {
  fromBlock: number
  toBlock?: number
  logs: Array<LogSelection>
  transactions: Array<TransactionSelection>
  includeAllBlocks: boolean
  fieldSelection: FieldSelection
  maxNumBlocks?: number
  maxNumTransactions?: number
  maxNumLogs?: number
}
export interface Event {
  transaction?: Transaction
  block?: Block
  log: Log
}
export interface Log {
  removed?: boolean
  logIndex: number
  transactionIndex: number
  transactionHash?: string
  blockHash?: string
  blockNumber: number
  address?: string
  data?: string
  topics: Array<string | undefined | null>
}
export interface Transaction {
  blockHash?: string
  blockNumber: number
  from?: string
  gas?: string
  gasPrice?: string
  hash?: string
  input?: string
  nonce?: string
  to?: string
  transactionIndex: number
  value?: string
  v?: string
  r?: string
  s?: string
  maxPriorityFeePerGas?: string
  maxFeePerGas?: string
  chainId?: string
  cumulativeGasUsed?: string
  effectiveGasPrice?: string
  gasUsed?: string
  contractAddress?: string
  logsBloom?: string
  kind?: number
  root?: string
  status?: number
}
export interface Block {
  number: number
  hash?: string
  parentHash?: string
  nonce?: string
  sha3Uncles?: string
  logsBloom?: string
  transactionsRoot?: string
  stateRoot?: string
  receiptsRoot?: string
  miner?: string
  difficulty?: string
  totalDifficulty?: string
  extraData?: string
  size?: string
  gasLimit?: string
  gasUsed?: string
  timestamp?: number
  baseFeePerGas?: string
}
export interface QueryResponseData {
  blocks: Array<Block>
  transactions: Array<Transaction>
  logs: Array<Log>
}
export interface QueryResponse {
  archiveHeight?: number
  nextBlock: number
  totalExecutionTime: number
  data: QueryResponseData
}
export interface Events {
  archiveHeight?: number
  nextBlock: number
  totalExecutionTime: number
  events: Array<Event>
}
export class SkarClient {
  static new(cfg: Config): SkarClient
  getHeight(): Promise<number>
  sendReq(query: Query): Promise<QueryResponse>
  sendEventsReq(query: Query): Promise<Events>
}
